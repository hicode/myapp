from ib.opt import ibConnection
con = ibConnection()
con.connect()
from ib.opt import ibConnection, message
con = ibConnection()
con.register(printData, message.historicalData)
con.connect()

from ib.ext.Contract import Contract
newContract = Contract()
newContract.m_symbol = 'TSLA'
newContract.m_secType = 'STK'
newContract.m_exchange = 'SMART'
newContract.m_currency = 'USD'
newContract.m_expiry = ''
newContract.m_strike = 0.0
newContract.m_right = ''

reqHistoricalData(tickerId, contract,
                          endDateTime, # last requested bar date/time
                          durationStr,  # quote duration, units: S,D,W,M,Y
                          barSizeSetting,  # bar length
                          whatToShow,  # what to show
                          useRTH, formatDate )








##########another example from http://pythonprogramming.net/ibpy-tutorial-using-interactive-brokers-api-python/
from ib.opt import Connection, message
from ib.ext.Contract import Contract
from ib.ext.Order import Order
def make_contract(symbol, sec_type, exch, prim_exchange, curr):
    Contract.m_symbol = symbol
    Contract.m_secType = sec_type
    Contract.m_exchange = exch
    Contract.m_primaryExch = prim_exch
    Contract.m_currency = curr
    return Contract

def make_order(action,quantity, price = None):
    if price is not None:
        order = Order()
        order.m_orderType = 'LMT'
        order.m_totalQuantity = quantity
        order.m_action = action
        order.m_lmtPrice = price
    else:
        order = Order()
        order.m_orderType = 'MKT'
        order.m_totalQuantity = quantity
        order.m_action = action
    return order

cid = 303
while __name__ == "__main__":
    conn = Connection.create(port=7496, clientId=999)
    conn.connect()
    oid = cid
    cont = make_contract('TSLA', 'STK', 'SMART', 'SMART', 'USD')
    offer = make_order('BUY', 1, 200)
    conn.placeOrder(oid, cont, offer)
    conn.disconnect()
    x = raw_input('enter to resend')
    cid += 1












##########another example from http://stackoverflow.com/questions/13204686/ibpy-how-to-extract-api-response-into-a-variable
import ib
from ib.ext.Contract import Contract
from ib.opt import ibConnection, message
from time import sleep

#       self.tws = ibConnection('localhost', 7496£¬ 0£©  #4001, 0)
class Downloader(object):
    def __init__(self,debug=False):
        self.tws = ibConnection('localhost', 7496, 0) #4001, 0)
        if debug:
            self.tws.registerAll(self.debugHandler)
        self.tws.connect()
        self._reqId = 1 # current request id
    def debugHandler(self,msg):
        print '[debug]', msg
    def requestData(self,contract):
        self.tws.reqMktData(self._reqId,c,'',1)
        self._reqId+=1
        return "???"

if __name__=='__main__':
    dl = Downloader(debug=True)
    c = Contract()
    c.m_symbol = 'SPY'
    c.m_secType = 'STK'
    c.m_exchange = 'SMART'
    c.m_currency = 'USD'
    laststockpricefield4 = dl.requestData(c)
    print laststockpricefield4
    sleep(3)
    print 'Done.'



c = Contract()
c.m_symbol = '1211'   #SPY'
c.m_secType = 'STK'
c.m_exchange = 'SEHK'  #SMART'
c.m_currency = 'USD'
laststockpricefield4 = dl.requestData(c)
print laststockpricefield4
sleep(3)
print 'Done.'


##########another example from http://www.dzone.com/snippets/ibpy-example-connect-ib-and
from time import sleep
from ib.ext.Contract import Contract
from ib.opt import ibConnection, message
import time

#  Simple function that prints a message
def my_account_handler(msg):
    print msg

# print tick message
def my_tick_handler(msg):
    print time.ctime()
    print msg

# create contract object
def makeStkContract(contractTuple):
    newContract = Contract()
    newContract.m_symbol = contractTuple[0]
    newContract.m_secType = contractTuple[1]
    newContract.m_exchange = contractTuple[2]
    newContract.m_currency = contractTuple[3]
    newContract.m_expiry = contractTuple[4]
    newContract.m_strike = contractTuple[5]
    newContract.m_right = contractTuple[6]
    print 'Contract Values:%s,%s,%s,%s,%s,%s,%s:' % contractTuple
    return newContract

if __name__ == '__main__':
    con = ibConnection()
    con.register(my_tick_handler, message.HistoricalData)
    con.register(my_tick_handler, message.TickSize, message.TickPrice)
    con.connect()

    contractTuple = ('EUR', 'CASH', 'IDEALPRO', 'USD', '200909', 0.0, '')
    #contractTuple = ('DAX', 'FUT', 'DTB', 'EUR', '200909', 0.0, '')
    #contractTuple = ('DAX', 'FUT', 'DTB', 'EUR', '200906', 0.0, '')

    qqqq = makeStkContract(contractTuple)

    con.reqMktData(1, qqqq, '', False)

    con.reqHistoricalData(1,qqqq,'', '1 D', '1 min', 'TRADES',1,1)

    sleep(60)
    print "finished"
